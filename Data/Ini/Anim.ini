; orx - Tutorial config file
; Should be used with orx v.1.3+

[Main]
GameFile = Anim; NB: It defines the game file when using the default main executable

[Input]
SetList = TutorialInput

[TutorialInput]
KEY_UP    = Explosion

[Pivot]
; This define the pivot we will use for all our animation frames
Pivot = (64.0,127.0,0.0)

[Graphic@Pivot]
; This is the main graphic object, used when no animation is played
Texture = ../Data/Object/fireball.png

[Soldier]
Graphic             = Graphic
AnimationSet        = AnimSet
Scale               = 1.0
;AnimationFrequency  = 2.0f

[AnimSet]
; Here we defines an animation set which contains a group of animation and all the possible transitions
; This will be unique in memory, no matter how many objects use it

; First we define the complete set of animation
AnimationList = IdleRight#WalkRight

; Then we define all the links to form the animation graph
LinkList = IdleFireballLoop#Idle2BurnFireballLoop#BurnLoop#Burn2IdleFireballLoop

; Here we specify that we can loop on idle right, but also go to walk right or idle left at once, using the immediate property
[IdleFireballLoop]
Source      = IdleRight
Destination = IdleRight
[Idle2BurnFireballLoop]
Source      = IdleRight
Destination = WalkRight
Property    = immediate
[BurnLoop]
Source      = WalkRight
Destination = WalkRight
[Burn2IdleFireballLoop]
Source      = WalkRight
Destination = IdleRight
Property    = immediate; <= If you remove this property, the animation won't be cut to go immediately back to idle
Priority    = 9
; Having defined an animation set, we can easily ask for a specific animation in code, all the transitions will
; be made by the engine without having to bother chaining them manually
; With a more complex graph, we could have our soldier sitting and asking him to run
; He would then automatically stand up, begin to run, then run without having to write any code for this to happen
; Events are sent when animations start, end or are cut so you can act accordingly if needed

[IdleRight]
; Our idle animation is only one frame here, that lasts for 0.05s
KeyData1      = Fire1
KeyDuration1  = 0.1


[WalkRight]
; We have 6 frames in our walk animation
DefaultKeyDuration  = 0.025; <= This defines the duration for all our frames unless locally specified differently
KeyData1            = Fire1
KeyEventName1       = !!Right!!
KeyData2            = Fire2
KeyData3            = Fire3
KeyData4            = Fire4
KeyData5            = Fire5
KeyData6            = Fire6
KeyData7            = Fire7
KeyData8            = Fire8
KeyData9            = Fire9
KeyData10            = Fire10
KeyData11            = Fire11
KeyData12            = Fire12
KeyData13            = Fire13
KeyData14            = Fire14
KeyData15            = Fire15
KeyData16            = Fire16
KeyData17            = Fire17
KeyData18            = Fire18
KeyData19            = Fire19
KeyData20            = Fire20
KeyData21            = Fire21
KeyData22            = Fire22
KeyData23            = Fire23
KeyData24            = Fire24
; Below are the frame data for our animations

[FullGraphic@Pivot]
; This define the graphic object used by animation for their frames
; We will just need to define locally the specific area of the texture that we'll use
; We can of course use one different image per frame, but this tutorial shows how to do it
; with a single image containing many frames
Texture     = ../Data/Anim/fireball1_tiled4.png
TextureSize = (128, 128, 0)

[Fire1@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 0, 0)

[Fire2@FullGraphic]
TextureCorner = (128, 0, 0)

[Fire3@FullGraphic]
TextureCorner = (256, 0, 0)

[Fire4@FullGraphic]
TextureCorner = (384, 0, 0)

[Fire5@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 128, 0)

[Fire6@FullGraphic]
TextureCorner = (128, 128, 0)

[Fire7@FullGraphic]
TextureCorner = (256, 128, 0)

[Fire8@FullGraphic]
TextureCorner = (384, 128, 0)

[Fire9@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 256, 0)

[Fire10@FullGraphic]
TextureCorner = (128, 256, 0)

[Fire11@FullGraphic]
TextureCorner = (256, 256, 0)

[Fire12@FullGraphic]
TextureCorner = (384, 256, 0)

[Fire13@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 384, 0)

[Fire14@FullGraphic]
TextureCorner = (128, 384, 0)

[Fire15@FullGraphic]
TextureCorner = (256, 384, 0)

[Fire16@FullGraphic]
TextureCorner = (384, 384, 0)

[Fire17@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 512, 0)

[Fire18@FullGraphic]
TextureCorner = (128, 512, 0)

[Fire19@FullGraphic]
TextureCorner = (256, 512, 0)

[Fire20@FullGraphic]
TextureCorner = (384, 512, 0)

[Fire21@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 640, 0)

[Fire22@FullGraphic]
TextureCorner = (128, 640, 0)

[Fire23@FullGraphic]
TextureCorner = (256, 640, 0)

[Fire24@FullGraphic]
TextureCorner = (384, 640, 0)



