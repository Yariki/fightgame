; orx - Tutorial config file
; Should be used with orx v.1.3+

[Main]
GameFile = AnimTree; NB: It defines the game file when using the default main executable

[Pivot]
; This define the pivot we will use for all our animation frames
Pivot = (50.0,50.0,0.0)

[Graphic@Pivot]
; This is the main graphic object, used when no animation is played
Texture = ../Data/Object/1_006.png

[StaticAnimatedEntity]
Graphic             = Graphic
AnimationSet        = AnimSet
Scale               = 1.0
Position			= (-300,190,0)
;AnimationFrequency  = 2.0f

[AnimSet]
; Here we defines an animation set which contains a group of animation and all the possible transitions
; This will be unique in memory, no matter how many objects use it

; First we define the complete set of animation
AnimationList = Helper1Animation#MainAnimation

; Then we define all the links to form the animation graph
LinkList = IdleLoop#Idle2WindLoop#WindLoop#Wind2IdleLoop

; Here we specify that we can loop on idle right, but also go to walk right or idle left at once, using the immediate property
[IdleLoop]
Source      = Helper1Animation
Destination = Helper1Animation
[Idle2WindLoop]
Source      = Helper1Animation
Destination = MainAnimation
Property    = immediate
[WindLoop]
Source      = MainAnimation
Destination = MainAnimation
[Wind2IdleLoop]
Source      = MainAnimation
Destination = Helper1Animation
Property    = immediate; <= If you remove this property, the animation won't be cut to go immediately back to idle
Priority    = 9
; Having defined an animation set, we can easily ask for a specific animation in code, all the transitions will
; be made by the engine without having to bother chaining them manually
; With a more complex graph, we could have our soldier sitting and asking him to run
; He would then automatically stand up, begin to run, then run without having to write any code for this to happen
; Events are sent when animations start, end or are cut so you can act accordingly if needed

[Helper1Animation]
; Our idle animation is only one frame here, that lasts for 0.05s
KeyData1      = Tree1
KeyDuration1  = 0.1


[MainAnimation]
; We have 6 frames in our walk animation
DefaultKeyDuration  = 0.1; <= This defines the duration for all our frames unless locally specified differently
KeyData1            = Tree1
KeyEventName1       = !!Wind!!
KeyData2            = Tree2
KeyData3            = Tree3
KeyData4            = Tree4
KeyData5            = Tree5
KeyData6            = Tree6

[FullGraphic@Pivot]
; This define the graphic object used by animation for their frames
; We will just need to define locally the specific area of the texture that we'll use
; We can of course use one different image per frame, but this tutorial shows how to do it
; with a single image containing many frames
Texture     = ../Data/Anim/tree2.png
TextureSize = (100, 100, 0)

[Tree1@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 0, 0)

[Tree2@FullGraphic]
TextureCorner = (100, 0, 0)

[Tree3@FullGraphic]
TextureCorner = (200, 0, 0)

[Tree4@FullGraphic]
TextureCorner = (300, 0, 0)

[Tree5@FullGraphic]
TextureCorner = (400, 0, 0)

[Tree6@FullGraphic]
TextureCorner = (500, 0, 0)




