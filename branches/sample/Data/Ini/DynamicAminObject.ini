[Main]
GameFile = DynamicAnimEntity1; NB: It defines the game file when using the default main executable

[DynamicAnimatedEntity]
Graphic         = GraphicBird
Position		= (-300,-300,0)
AnimationSet    = AnimDynSet
Scale			= 0.5
Strategy		= line

[GraphicBird@Pivot]
Texture       = ../Data/Object/bird.png

[Pivot]
Pivot = center

[Line]
Start = (-300,-300,0)
Finish = (300,-300,0)
Speed = 100.0
Axis = x
Repeat = hboth

[AnimDynSet]
; Here we defines an animation set which contains a group of animation and all the possible transitions
; This will be unique in memory, no matter how many objects use it

; First we define the complete set of animation
AnimationList = LeftAnim#RightAnim

; Then we define all the links to form the animation graph
LinkList = LeftLoop#Left2RightLoop#RightLoop#Right2LeftLoop

; Here we specify that we can loop on idle right, but also go to walk right or idle left at once, using the immediate property
[LeftLoop]
Source      = LeftAnim
Destination = LeftAnim
[Left2RightLoop]
Source      = LeftAnim
Destination = RightAnim
Property    = immediate
[RightLoop]
Source      = RightAnim
Destination = RightAnim
[Right2LeftLoop]
Source      = RightAnim
Destination = LeftAnim
Property    = immediate; <= If you remove this property, the animation won't be cut to go immediately back to idle
Priority    = 9
; Having defined an animation set, we can easily ask for a specific animation in code, all the transitions will
; be made by the engine without having to bother chaining them manually
; With a more complex graph, we could have our soldier sitting and asking him to run
; He would then automatically stand up, begin to run, then run without having to write any code for this to happen
; Events are sent when animations start, end or are cut so you can act accordingly if needed

[LeftAnim]
; Our idle animation is only one frame here, that lasts for 0.05s
DefaultKeyDuration  = 0.1;
KeyData1      = Bird1
KeyData2      = Bird2
KeyData3      = Bird3
KeyData4      = Bird4
KeyData5      = Bird5
KeyData6      = Bird6
KeyData7      = Bird7
KeyData8      = Bird8
KeyData9      = Bird9


[RightAnim]
; We have 6 frames in our walk animation
DefaultKeyDuration  = 0.1; <= This defines the duration for all our frames unless locally specified differently
KeyData1      = BirdR1
KeyData2      = BirdR2
KeyData3      = BirdR3
KeyData4      = BirdR4
KeyData5      = BirdR5
KeyData6      = BirdR6
KeyData7      = BirdR7
KeyData8      = BirdR8
KeyData9      = BirdR9

[FullGraphic@Pivot]
; This define the graphic object used by animation for their frames
; We will just need to define locally the specific area of the texture that we'll use
; We can of course use one different image per frame, but this tutorial shows how to do it
; with a single image containing many frames
Texture     = ../Data/Anim/bird_anim_a.png
TextureSize = (170, 170, 0)

[Bird1@FullGraphic]
; First animation frame, we use a generic naming as the frames may here be used in different animations
TextureCorner = (0, 0, 0)

[Bird2@FullGraphic]
TextureCorner = (170, 0, 0)

[Bird3@FullGraphic]
TextureCorner = (340, 0, 0)

[Bird4@FullGraphic]
TextureCorner = (0, 170, 0)

[Bird5@FullGraphic]
TextureCorner = (170, 170, 0)

[Bird6@FullGraphic]
TextureCorner = (340, 170, 0)

[Bird7@FullGraphic]
TextureCorner = (0, 340, 0)

[Bird8@FullGraphic]
TextureCorner = (170, 340, 0)

[Bird9@FullGraphic]
TextureCorner = (340, 340, 0)

[BirdR1@Bird1]
Flip = x

[BirdR2@Bird2]
Flip = x

[BirdR3@Bird3]
Flip = x

[BirdR4@Bird4]
Flip = x

[BirdR5@Bird5]
Flip = x

[BirdR6@Bird6]
Flip = x

[BirdR7@Bird7]
Flip = x

[BirdR8@Bird8]
Flip = x

[BirdR9@Bird9]
Flip = x



